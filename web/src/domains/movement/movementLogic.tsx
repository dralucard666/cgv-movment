/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three"
import React, { useEffect, useLayoutEffect, useMemo, useRef, useState } from "react"
import { useGLTF, useAnimations } from "@react-three/drei"
import { GLTF, SkeletonUtils } from "three-stdlib"
import { AnimationClip, Group } from "three"
import { extend, useFrame, useGraph } from "@react-three/fiber"
import { movObject, useMovementStore } from "./useMovementStore"
import { RemyPlace } from "./remyplace"
import { Cyclist } from "./cyclist"
import { ObjectType } from "cgv/domains/movement"
import { TextComponent } from "./text"

const extraData: any = {
    pedestrian: {
        textMarginX: -10,
        textMarginY: 45,
    },
    cyclist: {
        textMarginX: -10,
        textMarginY: 45,
    },
}

export default function MovementLogic(props: { id: string; data: movObject }) {
    const object = useRef<any>()
    const text = useRef<any>()
    const type = props.data.type

    const [textMarginX, textMarginY] = getExtraData(type)

    const [scene] = useState(() => new THREE.Scene())
    const Person = useMemo(() => {
        switch (type) {
            case ObjectType.Cyclist:
                return <Cyclist key={props.id} id={props.id} ref={object}></Cyclist>
            case ObjectType.Pedestrian:
                return <RemyPlace key={props.id} id={props.id} ref={object}></RemyPlace>
            default:
                return <RemyPlace key={props.id} id={props.id} ref={object}></RemyPlace>
        }
    }, [props])
    const line = useRef<any>()

    const data = props.data

    useEffect(() => {
        if (object.current && data.framePos.length > 0) {
            const firstPos = data.framePos[0]
            if (firstPos.position) {
                const x = firstPos.position[0]
                const y = firstPos.position[1]
                const z = firstPos.position[2]
                object.current.updatePosition(x, y + 15, z, Math.PI / 2, 0)
                text.current.updatePosition(x + textMarginX, y + textMarginY, z)
            }
        }
    }, [object, props])

    useFrame((state, delta) => {
        const currentTime = useMovementStore.getState().time

        if (data.startT <= currentTime && currentTime <= data.endT && data.framePos) {
            const arrayIndex = currentTime - data.startT
            const currentLine = data.framePos[arrayIndex]
            const direction = currentLine.direction
            if (currentLine.position && object.current && line.current && direction) {
                const positionX = currentLine.position[0]
                const positionY = currentLine.position[1]
                const positionZ = currentLine.position[2]

                const angle = -Math.atan2(direction[2], direction[0]) + Math.PI / 2
                object.current.updatePosition(positionX, positionY, positionZ, angle, delta)
                text.current.updatePosition(positionX + textMarginX, positionY + textMarginY, positionZ)

                const oldLinePos = [positionX, 10, positionZ]
                const newLinePos = [positionX + direction[0] * 50, 12, positionZ + direction[2] * 50]
                line.current.geometry.setFromPoints(
                    [oldLinePos, newLinePos].map((point) => new THREE.Vector3(...point))
                )
            }
        }
    })

    return (
        <>
            <TextComponent {...{ text: props.id }} ref={text} />
            {Person}
            <line ref={line}>
                <bufferGeometry />
                <lineBasicMaterial attach="material" color={"#9c88ff"} linewidth={100} />
            </line>
        </>
    )
}

function getExtraData(type: ObjectType): [number, number] {
    switch (type) {
        case ObjectType.Cyclist:
            return [extraData.cyclist.textMarginX, extraData.cyclist.textMarginY]
        case ObjectType.Pedestrian:
            return [extraData.pedestrian.textMarginX, extraData.pedestrian.textMarginY]
        default:
            return [extraData.pedestrian.textMarginX, extraData.pedestrian.textMarginY]
    }
}
