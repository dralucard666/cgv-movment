/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Daniel Zhabotinsky (https://sketchfab.com/DanielZhabotinsky)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/light-commercial-truck-07-low-poly-model-3be03b6a43aa41898c9ca806b8787052
title: Light Commercial Truck '07- Low poly model
*/

import * as THREE from "three"
import React, { forwardRef, useImperativeHandle, useRef } from "react"
import { useGLTF } from "@react-three/drei"
import { GLTF } from "three-stdlib"

type GLTFResult = GLTF & {
    nodes: {
        BODY_BODY_0: THREE.Mesh
        interior_VOID_0: THREE.Mesh
        bottom_BOTTOM_0: THREE.Mesh
        ["bottom_07_-_Default_0"]: THREE.Mesh
        LIGHTS_LIGHT_0: THREE.Mesh
        LIGHTS_LIGHTS_GLASS_0: THREE.Mesh
        GLASS_GLASS_0: THREE.Mesh
        CABIN_PLASTIC_PLASTIC_0: THREE.Mesh
        CABIN_PLASTIC_METALL_0: THREE.Mesh
        BOX_METAL_METALL_0: THREE.Mesh
        wheel_01_RIM_0: THREE.Mesh
        wheel_01_TIRE_0: THREE.Mesh
        wheel_02_TIRE_0: THREE.Mesh
        wheel_02_RIM_0: THREE.Mesh
        wheel_003_TIRE_0: THREE.Mesh
        wheel_003_RIM_0: THREE.Mesh
        wheel_004_RIM_0: THREE.Mesh
        wheel_004_TIRE_0: THREE.Mesh
        BUMPER_FRONT_INNER_BOTTOM_0: THREE.Mesh
        BUMPER_FRONT_PLASTIC_0: THREE.Mesh
    }
    materials: {
        BODY: THREE.MeshStandardMaterial
        VOID: THREE.MeshStandardMaterial
        BOTTOM: THREE.MeshStandardMaterial
        ["07_-_Default"]: THREE.MeshStandardMaterial
        LIGHT: THREE.MeshStandardMaterial
        LIGHTS_GLASS: THREE.MeshStandardMaterial
        GLASS: THREE.MeshStandardMaterial
        PLASTIC: THREE.MeshStandardMaterial
        METALL: THREE.MeshStandardMaterial
        material: THREE.MeshStandardMaterial
        TIRE: THREE.MeshStandardMaterial
    }
}

export const Truck = forwardRef((props: { id: string | null; scale: number }, ref) => {
    const group = useRef<any>()
    const { nodes, materials } = useGLTF("./models/truck.glb") as GLTFResult

    useImperativeHandle(ref, () => ({
        updatePosition(x: number, y: number, z: number, angle: number, delta: number) {
            group.current.rotation.y = angle
            group.current.position.y = y+2
            group.current.position.z = z
            group.current.position.x = x
        },
    }))

    return (
        <group ref={group} dispose={null} scale={props.scale}>
            <group rotation={[-Math.PI / 2, 0, 0]}>
                <group rotation={[Math.PI / 2, 0, 0]}>
                    <group position={[3.78, 64.77, 0.21]} rotation={[0, -Math.PI / 2, 0]} scale={[0.91, 0.85, 0.85]}>
                        <group position={[10.19, -20.82, 144.24]}>
                            <mesh geometry={nodes.BODY_BODY_0.geometry} material={materials.BODY} />
                        </group>
                    </group>
                    <group position={[-86.39, 57.34, 0.45]} rotation={[0, -Math.PI / 2, 0]} scale={0.85}>
                        <group position={[-1.3, -28.61, 42.95]}>
                            <mesh geometry={nodes.interior_VOID_0.geometry} material={materials.VOID} />
                        </group>
                    </group>
                    <group position={[8.64, 20.85, 0.44]} rotation={[Math.PI / 2, 0, -Math.PI]} scale={1.31}>
                        <group position={[71.49, -0.58, 15.66]}>
                            <mesh geometry={nodes.bottom_BOTTOM_0.geometry} material={materials.BOTTOM} />
                            <mesh
                                geometry={nodes["bottom_07_-_Default_0"].geometry}
                                material={materials["07_-_Default"]}
                            />
                        </group>
                    </group>
                    <group position={[-0.79, 30.87, 0.21]} rotation={[0, -Math.PI / 2, 0]} scale={[0.91, 0.85, 0.85]}>
                        <group position={[10.19, 19.01, 138.87]}>
                            <mesh geometry={nodes.LIGHTS_LIGHT_0.geometry} material={materials.LIGHT} />
                            <mesh geometry={nodes.LIGHTS_LIGHTS_GLASS_0.geometry} material={materials.LIGHTS_GLASS} />
                        </group>
                    </group>
                    <group position={[-91.96, 64.56, 0.21]} rotation={[0, -Math.PI / 2, 0]} scale={[0.91, 0.85, 0.85]}>
                        <group position={[10.19, -20.58, 29.64]}>
                            <mesh geometry={nodes.GLASS_GLASS_0.geometry} material={materials.GLASS} />
                        </group>
                    </group>
                    <group position={[-89.58, 62.39, 0.21]}>
                        <group position={[23.2, -13.96, 42.09]}>
                            <mesh geometry={nodes.CABIN_PLASTIC_PLASTIC_0.geometry} material={materials.PLASTIC} />
                            <mesh geometry={nodes.CABIN_PLASTIC_METALL_0.geometry} material={materials.METALL} />
                        </group>
                    </group>
                    <group position={[37.58, 72.49, 0.21]}>
                        <group position={[1.78, 0, 46.74]}>
                            <mesh geometry={nodes.BOX_METAL_METALL_0.geometry} material={materials.METALL} />
                        </group>
                    </group>
                    <group position={[-80.35, 14.59, 38.22]} rotation={[-Math.PI / 2, 0, 0]} scale={1.11}>
                        <group position={[0, -0.89, 0]}>
                            <mesh geometry={nodes.wheel_01_RIM_0.geometry} material={materials.material} />
                            <mesh geometry={nodes.wheel_01_TIRE_0.geometry} material={materials.TIRE} />
                        </group>
                    </group>
                    <group position={[65.15, 14.59, 34.8]} rotation={[-Math.PI / 2, 0, 0]} scale={1.11}>
                        <group position={[0, -3.96, 0]}>
                            <mesh geometry={nodes.wheel_02_TIRE_0.geometry} material={materials.TIRE} />
                            <mesh geometry={nodes.wheel_02_RIM_0.geometry} material={materials.material} />
                        </group>
                    </group>
                    <group position={[65.15, 14.59, -34.49]} rotation={[Math.PI / 2, 0, 0]} scale={1.11}>
                        <group position={[0, -3.96, 0]}>
                            <mesh geometry={nodes.wheel_003_TIRE_0.geometry} material={materials.TIRE} />
                            <mesh geometry={nodes.wheel_003_RIM_0.geometry} material={materials.material} />
                        </group>
                    </group>
                    <group position={[-80.35, 14.59, -37.92]} rotation={[Math.PI / 2, 0, 0]} scale={1.11}>
                        <group position={[0, -0.89, 0]}>
                            <mesh geometry={nodes.wheel_004_RIM_0.geometry} material={materials.material} />
                            <mesh geometry={nodes.wheel_004_TIRE_0.geometry} material={materials.TIRE} />
                        </group>
                    </group>
                    <group position={[-111.5, 16.83, 0.21]} scale={[0.85, 0.85, 0.91]}>
                        <group position={[9.52, -2.51, 48.36]}>
                            <mesh geometry={nodes.BUMPER_FRONT_INNER_BOTTOM_0.geometry} material={materials.BOTTOM} />
                        </group>
                    </group>
                    <group position={[-111.5, 16.83, 0.21]} scale={[0.85, 0.85, 0.91]}>
                        <group position={[9.52, -2.51, 48.36]}>
                            <mesh geometry={nodes.BUMPER_FRONT_PLASTIC_0.geometry} material={materials.PLASTIC} />
                        </group>
                    </group>
                </group>
            </group>
        </group>
    )
})

useGLTF.preload("./models/truck.glb")
